c
@genre_id
c
params
c
params[:title]
params
c
BookCreator.new.create_book(book_params)
book_params
c
BookCreator.new(book_params).create_book
c
book_params
c
\
c
params[:title]
c
 BookCreator.new
BookCreator.new
c
 BookCreater
BookCreator.new
params
BookCreator.new
c
json.first["repository_name"]
json.first["login"]
json.first["name"]
JSON.parse(response.body)
json.first["name"]
exit
c
exit
@user = User.create(username:repository["owner"]["login"])
c
exit
c
@user = User.create(username:repository["owner"]["login"])
c
exit
c
 Repository.create(repository_name:repository["name"],stargazers_count:repository["stargazers_count"], user_id:@user[:id]) 
@user = User.create(username:repository["owner"]["login"])
c
 Repository.create(repository_name:repository["name"],stargazers_count:repository["stargazers_count"],user_id:2)
   11:                         stargazers_count:repository["stargazers_count"],
 Repository.create(repository_name:repository["name"],
   12:                         user_id:@user[:id])
   11:                         stargazers_count:repository["stargazers_count"],
 Repository.create(repository_name:repository["name"],
user = User.find(2)
User.find(2)
repository["owner"]["login"]
User.find_by(username:repository["owner"]["login"])
repository["owner"]["login"]
c
@user = User.find_by(username:repository["owner"]["login"])
c
JSON.parse(result).each do |repository|
c
Repository.repository_create(result)
repository = Repository.repository_create(result)
result = RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
c
RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
User::BASE_URI + "/#{params[:username]}/repos"
(byebug) 
   14:   end
   13:     render json: repository
   12:     # byebug
   11:     repository = Repository.repository_create(result)
User::BASE_URI + "/#{params[:username]}/repos")
(byebug) 
   14:   end
   13:     render json: repository
   12:     # byebug
   11:     repository = Repository.repository_create(result)
User::BASE_URI + "/#{params[:username]}/repos")
c
User::BASE_URI + "/#{params[:username]}/repos"
RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
params[:username]
c
params[:username]
c
https://api.github.com/users/mankumar07/repos
https://api.github.com/users/rails/repos
https://api.github.com/users/:username/repos
User::BASE_URI + "/#{params[:username]}/repos"
RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
result = RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
c
post('/api/v1/mankumar07/repos', params: { username: 'mankumar07' })
post('https://api.github.com/users/api/v1/mankumar07/repos', params: { username: 'mankumar07' })
get('https://api.github.com/users/api/v1/mankumar07/repos', params: { username: 'mankumar07' })
 let(:response_json)
get('/api/v1/mankumar07/repos', params: { username: 'mankumar07' })
get('https://api.github.com/users/api/v1/mankumar07/repos', params: { username: 'mankumar07' })
https://api.github.com/users/api/v1/mankumar07/repos
c
WebMock.stub_request(:get, "https://api.github.com/users/rails/repos")
bMock.stub_request(:get, "https://api.github.com/users/rails/repos")
c
let(:response_json)
post('/repositories', params: { username: 'rails' })
c
   11:     end
   10:       post('/repositories', params: { username: 'rails' })
 subject do
describe 'POST /repositories' do
c
first_stub_result
c
File.open(path1).read
c
first_stub_result
first_stub_result = File.open(path1).read
path1
c
Repository.repository_create(result)
result = RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
c
repository
c
result
c
result = RestClient.get(User::BASE_URI + "/#{params[:username]}/repos")
 result
c
"https://api.github.com/users/mankumar07/repositories"
User::BASE_URI
params[:username]
RestClient.get(User::BASE_URI + "/#{params[:username]}/repositories")
result = RestClient.get(User::BASE_URI + "/#{params[:username]}/repositories")
c
RestClient::NotFound Exception: 404 Not Found
RestClient.get(User::BASE_URI + "/#{params[:username]}/repository")
c
RestClient.get("https://api.github.com/users/mankumar07/repository")
RestClient.get("https://api.github.com/users/mankumar07/repository"
User::BASE_URI + "/#{params[:username]}/repository"
RestClient.get(User::BASE_URI + "/#{params[:username]}/repository")
result = RestClient.get(User::BASE_URI + "/#{params[:username]}/repository")
c
RestClient.get(User::BASE_URI + "/#{params[:username]}/repository")
result
c
 user
c
name
c
result
result = RestClient.get(User::BASE_URI + "/#{params[:username]}")
RestClient.get(User::BASE_URI + "/#{params[:username]}")
User::BASE_URI + "/#{params[:username]}"
User::BASE_URI
c
JSON.parse(result)["login"]
result
params[:username]
{params[:username]}
RestClient.get(User::BASE_URI + "/#{params[:username]}")
c
JSON.parse(respond_to?)["login"]
JSON.parse(response_to?)["login"]
JSON.parse(response_to)["login"]
JSON.parse(response)["login"]
JSON.parse(result)["login"]
name
